#include "VectorCached.h"
#include <random>
#include <limits>

int main() {
    int sizes[] = {12, 16, 64, 96};
    std::default_random_engine dre;
    std::uniform_int_distribution<int> id(0, std::numeric_limits<int>::max());

    for (auto n : sizes) {
        NvFlow::VectorCached<int, 12> a;
        a.reserve(n);

        for (int i = 0; i < n; ++i) {
            if (id(dre) % 2)
                a.push_back(id(dre));
            else {
                int pos = id(dre) % std::max<int>((int)a.size(), 1);
                if (pos < a.size()) a.erase(std::next(a.begin(), pos));
            }
        }
    }
}